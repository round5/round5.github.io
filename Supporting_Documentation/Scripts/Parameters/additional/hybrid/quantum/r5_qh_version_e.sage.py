
# This file was *autogenerated* from the file r5_qh_version_e.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_256 = Integer(256); _sage_const_512 = Integer(512); _sage_const_12 = Integer(12); _sage_const_999999999 = Integer(999999999)
sage.repl.load.load(sage.repl.load.base64.b64decode("cXVhbnR1bV9oeWJyaWQuc2FnZQ=="),globals(),False)

#os.environ['SAGE_LOAD_ATTACH_PATH'] = ':../' # :../parameter_definitions'
#load_attach_path()

#reset_load_attach_path()
#load_attach_path('../')
#load_attach_path('../parameter_definitions/')
#load_attach_path()



sage.repl.load.load('r5_parameter_set.py', globals())
sage.repl.load.load('main_parameter_definitions.py', globals())
sage.repl.load.load('main_parameter_sets_ee.py', globals())
sage.repl.load.load('chosen_parameter_sets.py', globals())


def find_r_quantum_improved_optimizer(n, q, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, print_results, preci, verbose):

    min_cost = _sage_const_999999999 
    step = _sage_const_256 
    
    k_lowest = _sage_const_0 
    k_highest = _sage_const_3 *n/_sage_const_4  #n 
    k_low = k_lowest
    k_high = k_highest
    k_opt = k_lowest

    # ratio between the keys that the attacker tries and the total number of keys
    s_lowest = _sage_const_0 
    s_highest = _sage_const_512 
    s_low = s_lowest
    s_high = s_highest
    s_opt = s_lowest
    
    m_lowest = _sage_const_0 
    m_highest = n
    m_low = m_lowest
    m_high = m_highest
    m_opt = m_lowest
    
    while (step > _sage_const_1 ) :
        for m in range (m_low, m_high, step):
            for k in range (k_low, k_high, step):
                for s in range (s_low, s_high, step):
		    #print n, q, m, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, 2**(-s), [k], print_results, preci
                    out = find_r_quantum_improved(n, q, m, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, _sage_const_2 **(-s), [k], print_results, preci, verbose)
                    if out[_sage_const_0 ] < min_cost:
                        k_opt = k
                        s_opt = s
                        m_opt = m
                        min_cost = out[_sage_const_0 ]

        k_low = max(k_lowest, k_opt - step)
        k_high = min(k_highest, k_opt + step)
        s_low = max(s_lowest, s_opt - step)
        s_high = min(s_highest, s_opt + step)
        m_low = max(m_lowest, m_opt - step)
        m_high = min(m_highest, m_opt + step)
        
        step = int(step / _sage_const_2 )
    
    print "BEST FOUND PARAMETERS:", n, q, m_opt, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, _sage_const_2 **(-s_opt), [k_opt], print_results, preci, verbose   
    print "Results for [bitsec, opt_bs, opt_r, m, round(log(size_S, 2))]"
    return find_r_quantum_improved(n, q, m_opt, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, _sage_const_2 **(-s_opt), [k_opt], print_results, preci, verbose)


#print("As in Wunderer's thesis: Parameter set V:")
#out = find_r_quantum_improved(786, 32768, 540, 156, 4.61, secret_structure = 'hweight_trinary', bkzmodel = 'NIST_core_qsieve', #nr_rotations = 1, scaling = True, size_S = 2**(-220), k_vals = [275], print_results = True, preci = 1)
#print out

##using the optimization function
#n = 786
#q = 32768
#h = 156
#sigma = 4.61
#secret_structure = 'hweight_trinary'
#bkzmodel = 'NIST_core_qsieve'
#nr_rotations = 1
#scaling = True
#print_results = False
#preci = 1
#print "Starting computation of uRound_n1_5kem"
#print find_r_quantum_improved_optimizer(n, q, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, print_results, #preci, False)
#print "The above is uRound_n1_5kem"

for paramSet in r5paramSets:
    print "Starting computation of parameter set " + paramSet.name
    d = paramSet.d
    q = paramSet.q
    p = paramSet.p
    h = paramSet.h

    verbose = False

    sigma = sqrt(_sage_const_1 /_sage_const_12 *((q*q)/(p*p) -_sage_const_1  ))
    secret_structure = 'hweight_trinary'
    #bkzmodel = 'NIST_core_qsieve'
    bkzmodel = 'NIST_core_enum'
    nr_rotations = _sage_const_1 
    scaling = True
    print_results = False
    preci = _sage_const_1 
    print d, q, p, h, sigma

    print find_r_quantum_improved_optimizer(d, q, h, sigma, secret_structure, bkzmodel, nr_rotations, scaling, print_results, preci, verbose)
    print "The above is " + paramSet.name









README                    Description of the contents of the media (this file).

Supporting_Documentation/    Directory with the submission documentation well as
                             some support tools.
  Round5_Submission.pdf      The submission documentation
  Speedtest/                 Directory with source files for running performance
                             measurement tests. See README in the same directory
                             for information.
  Scripts/                   Directory with scripts that can be used to analyse
                             correctness (subdirectory Correctness) and summarize
                             (subdirectory Parameters) Round5 parameters. See the
                             respective READMEs for information.

KAT/                         Directory with the KAT files for all variants.
                             Subdirectory kem contains the KEM variants,
                             subdirectory encrypt the PKE variants.

Reference_Implementation/    Directory with the source code for the reference
                             implementation of each variant.  Subdirectory kem
                             contains the KEM variants, subdirectory encrypt
                             the PKE variants.

Optimized_Implementation/    Directory with the source code for the optimized
                             implementation of each variant.  Subdirectory kem
                             contains the KEM variants, subdirectory encrypt,
                             the PKE variants.

Additional_Implementations/  Directory with the source code for additional
                             implementations of each variant.
  AVX2/                      Directory with the source code for the AVX2
                             optimized implementation of each variant.
                             This implementation also has the cache attack
                             countermeasures enabled.
  Configurable/              Directory with the source code for the
                             configurable implementation of each variant.


BUILDING IMPLEMENTATION VARIANTS
================================

Prerequisites
-------------

To be able to build and run an implementation variant, the following conditions
must be met:

* The OpenSSL library (preferably 1.1.1, or later) must be installed.
  Use "sudo apt-get install libssl-dev" for most Linux distributions.

  On a Mac, an easy way is to use brew (https://brew.sh), install it with
  "brew install openssl@1.1" and then add it to the CPATH and
  LIBRARY_PATH environment variables:

   export CPATH=${CPATH+$CPATH:}/usr/local/opt/openssl@1.1/include
   export LIBRARY_PATH=${LIBRARY_PATH+$LIBRARY_PATH:}/usr/local/opt/openssl@1.1/lib

* The Keccak library must be installed on your system.
  This is done as follows:

  1. Linux: Install xsltproc (e.g. "sudo apt-get install xsltproc", on
     a Mac it should already be installed with XCode).

  2. Clone the XKCP git repository (https://github.com/XKCP/XKCP.git).

  3. Build the library, e.g. using "make generic64/libkeccak.a" (for
     alternatives, see the github page).

  4. Add the library to your CPATH and LIBRARY_PATH environment variables:

     export CPATH=${CPATH+$CPATH:}<XKCP_DIRECTORY>/bin/generic64
     export LIBRARY_PATH=${LIBRARY_PATH+$LIBRARY_PATH:}<XKCP_DIRECTORY>/bin/generic64

     Where <XKCP_DIRECTORY> is the (absulute) path of the directory to which
     you cloned the repository.

  Note: if you previously installed the keccak library, make sure it is a
  version where issue #51 (https://github.com/XKCP/XKCP/issues/51) has been
  fixed. If this issue has not been fixed, the reference implementations will
  not produce the same results as the other implementations.

Building
--------

To build the NIST KAT generator for an implementation variant, simply go to the
respective directory, and run "make". E.g.:

    cd Additional_Implementations/Configurable/kem/R5ND_1KEM_5d
    make

To build a custom application using our implementation, simply copy all source
files found in the implementation-variant's directory (except the NIST KAT
generator file PQCgenKAT_*.c) to the directory containing your application code
and then compile everything using e.g.:

    gcc *.c

Build Options
-------------

There are a number of build options available with which you can alter the
implementation. The build options are configured by defining macros at compile
time.

The following macros can be used to alter the implementation:

* NIST_KAT_GENERATION: when this macro is defined, intermediate results are
  printed to stdout. This is used when generating KATs (this option is enabled
  by default in the supplied Makefile).

* ROUND5_API_TAU: can be set to 0, 1, or 2 to specify the tau algorithm
  parameter (i.e. the method of generating the A-matrix in case of non-ring
  parameter sets). Defaults to 2.

* ROUND5_API_TAU2_LEN: the length of the a-vector used when tau=2. Must be a
  power of 2 and greater than or equal to algorithm parameter d. Defaults to 0,
  meaning that parameter q will be used for the length.

* USE_AES_DRBG: define this macro to make use of AES instead of cSHAKE for the
  deterministic random number generator. Especially on hardware accelerated
  platforms (i.e. most modern CPUs), this can be considerably faster.

* NO_CM_CACHE: define this macro to disable cache attack countermeasures (only
  for the optimized implementation).

* AVX2: when this macro is defined, AVX2 optimizations will be enabled in the
  optimized implementation (if the platform supports this). Note that with this
  option, the cache attack countermeasures are enabled as well (in this case,
  the cache attack countermeasures can not be disabled with NO_CM_CACHE).

  With this option enabled, the optimized implementation is exactly the same as
  the AVX2 implementation as found under the additional implementations in the
  submission.

* SHIFT_LEFT64_CONSTANT_TIME: define this macro when your platform performs
  64-bit shift lefts with a variable amount in constant-time. Without this flag
  those shifts are replaced with a (slower) implementation that is
  constant-time (only applicable to the AVX2 optimized implementation or the
  optimized implementation with cache attack countermeasures enabled).

